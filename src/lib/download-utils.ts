// Utility functions for report download and generation

export const downloadUtils = {
  /**
   * Triggers a file download in the browser
   */
  triggerDownload: (url: string, filename: string) => {
    try {
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      link.target = '_blank'; // Open in new tab as fallback
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      return true;
    } catch (error) {
      console.error('Download failed:', error);
      return false;
    }
  },

  /**
   * Generate filename based on report config
   */
  generateFilename: (reportId: string, title: string, format: string) => {
    const sanitizedTitle = title.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
    const timestamp = new Date().toISOString().split('T')[0];
    return `zyrcle-${sanitizedTitle}-${timestamp}-${reportId}.${format}`;
  },

  /**
   * Create and download a simple CSV report
   */
  downloadCsvReport: (data: any, filename: string) => {
    try {
      const csvContent = convertToCSV(data);
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up the URL object
      URL.revokeObjectURL(url);
      return true;
    } catch (error) {
      console.error('CSV download failed:', error);
      return false;
    }
  },

  /**
   * Open report in new tab for preview
   */
  previewReport: (url: string) => {
    try {
      window.open(url, '_blank');
      return true;
    } catch (error) {
      console.error('Preview failed:', error);
      return false;
    }
  }
};

/**
 * Convert data object to CSV format
 */
function convertToCSV(data: any): string {
  if (!data) return '';
  
  // Simple CSV conversion - in a real app, you'd want more sophisticated handling
  const headers = Object.keys(data);
  const values = Object.values(data);
  
  let csv = headers.join(',') + '\n';
  
  if (Array.isArray(values[0])) {
    // Handle array of objects
    values.forEach((row: any) => {
      if (typeof row === 'object' && row !== null) {
        csv += Object.values(row).join(',') + '\n';
      }
    });
  } else {
    // Handle single object
    csv += values.join(',') + '\n';
  }
  
  return csv;
}

/**
 * Format report data for download
 */
export function formatReportForDownload(reportData: any, format: 'csv' | 'pdf' | 'excel' = 'csv') {
  const currentDate = new Date().toISOString().split('T')[0];
  
  switch (format) {
    case 'csv':
      return `Zyrcle LCA Report
Generated: ${currentDate}

Executive Summary
Metric,Value,Unit
Total Projects,${reportData.projectCount || 0},count
Total GWP,${reportData.totalGWP || 0},kg CO2 eq
Average Circularity Index,${reportData.avgCircularity || 0},0-1 scale

Project Details
${reportData.projects?.map((p: any) => 
  `${p.name},${p.material},${p.gwp || 0},${p.circularity || 0}`
).join('\n') || 'No project data available'}

Generated by Zyrcle - AI-Assisted LCA Analysis
Report ID: ${reportData.id || 'unknown'}`;

    case 'pdf':
      // For PDF, return HTML that could be converted to PDF
      return `
        <html>
          <head><title>Zyrcle LCA Report</title></head>
          <body>
            <h1>Zyrcle LCA Report</h1>
            <p>Generated: ${currentDate}</p>
            <h2>Executive Summary</h2>
            <p>Total Projects: ${reportData.projectCount || 0}</p>
            <p>Total GWP: ${reportData.totalGWP || 0} kg CO2 eq</p>
            <p>Average Circularity: ${reportData.avgCircularity || 0}</p>
          </body>
        </html>
      `;

    default:
      return JSON.stringify(reportData, null, 2);
  }
}